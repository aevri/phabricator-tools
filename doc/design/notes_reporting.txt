===============================================================================
= Proposal to start monitoring Git notes for Arcyd-managed repositories
===============================================================================

Arcyd should display Git notes in Phabricator reviews, this will make it
easy to bring CI results into Phabricator reviews.

-------------------------------------------------------------------------------
- Why involve Arcyd in CI?
-------------------------------------------------------------------------------

The command-line tool 'arcanist' participates by performing linting and
unit-tests locally on behalf of the user, according to the configuration in
the per-repo '.arcconfig' file.

Arcyd is an attempt to add value on top of Arcanist by removing the need to
install, configure and interact with it locally - simply push Git branches in
order to create and update reviews.

It would seem a natural extension of Arcyd from the user perspective to then
perform the lint and unit steps automatically configured in  the '.arcconfig'
file upon push and share the results in the review.

-------------------------------------------------------------------------------
- What are Git notes?
-------------------------------------------------------------------------------

It's not possible to modify the commit message of a commit without also
altering it's commit hash, effectively making a new commit.

Git notes are a facility added to Git in order to make it possible to annotate
commits post-creation, without altering their commit hash.

Git notes are metadata on individual commits.

-------------------------------------------------------------------------------
- Why Git notes?
-------------------------------------------------------------------------------

It's not possible to modify the commit message of a commit without also
altering it's commit hash, effectively making a new commit.  Git notes are a
facility added to Git in order to make it possible to annotate commits
post-creation, without altering their commit hash.

By annotating the relevant commits directly in the Git repository, it's
possible for all systems related to a repository to share information about
the commit, without the need for an additional system.

Git Notes are visible to humans, via 'git log --notes' and 'git notes'.
They are also visible in the GitHub commit view [1].  There seems to have
been some interest in making them visible in GitWeb too [2].

Namespaces for Git Notes mean that it's possible for multiple systems to
record metadata on individual commits, without knowing about eachother and
in their own time e.g. 'lint', 'build', 'regression'.

-------------------------------------------------------------------------------
- Limitations of Git notes for machine communication
-------------------------------------------------------------------------------

One note per commit is a lot of notes. For example, a repository with ten
thousand commits and 1k of text each would approach 10Mb of notes when not
compressed.

Pushing and pulling git repositories can be expected to take on the order of a
second each time.  Therefore Git should not be used for high frequency
communication.

Polling of Git servers is often discouraged as they are often set up with human
access patterns in mind.

Git notes are expected to be read and written by humans and may be displayed
alongside commits in a number of places, whether the user wants this or not.

Git scales well with content edited by humans, other content may result in poor
performance or complete outage.

Users must explicitly set up to fetch Git notes locally; it's tricky to merge
Git notes from multiple sources in the same namespace [3].

-------------------------------------------------------------------------------
- Recommendations on Git notes usage following from limitations
-------------------------------------------------------------------------------

1. Notes should be for humans to consume for review, not machines
2. Notes should be concise
3. Pushes of notes should be ff-only
4. At most, a constant number of notes per commit
5. One notes namespace per system, as few systems as possible

-------------------------------------------------------------------------------
- A counter example of CI and git notes
-------------------------------------------------------------------------------

$ git log -1 --notes=*

commit 4ff4fa41cab849c4d1ecae7fcc754090e67741d3
Author: Angelos Evripiotis <jevripiotis@bloomberg.net>
Date:   Wed Jun 25 19:05:58 2014 +0100

    arcyd/acceptance...: test pruning landing log

    Add a test to the arcyd acceptance tests to make sure that we can
    manually prune the landing log and have that change persist across new
    reviews.

    Previously this may have gone wrong because arcyd wasn't fetching the
    special refs with a refspec beginning with '+', which enables non-ff
    updates.

    Test Plan:
    $ ./testbed/arcyd/acceptance_tests.sh

Notes (pep8):
    Fail

    optparse.py:69:11: E401 multiple imports on one line
    optparse.py:77:1: E302 expected 2 blank lines, found 1
    optparse.py:88:5: E301 expected 1 blank line, found 0
    optparse.py:222:34: W602 deprecated form of raising exception
    optparse.py:347:31: E211 whitespace before '('
    optparse.py:357:17: E201 whitespace after '{'
    optparse.py:472:29: E221 multiple spaces before operator
    optparse.py:544:21: W601 .has_key() is deprecated, use 'in'
    argparse.py:69:11: E401 multiple imports on one line
    argparse.py:77:1: E302 expected 2 blank lines, found 1
    argparse.py:88:5: E301 expected 1 blank line, found 0
    argparse.py:222:34: W602 deprecated form of raising exception
    argparse.py:347:31: E211 whitespace before '('
    argparse.py:357:17: E201 whitespace after '{'
    argparse.py:472:29: E221 multiple spaces before operator
    argparse.py:544:21: W601 .has_key() is deprecated, use 'in'
    myparse.py:69:11: E401 multiple imports on one line
    myparse.py:77:1: E302 expected 2 blank lines, found 1
    myparse.py:88:5: E301 expected 1 blank line, found 0
    myparse.py:222:34: W602 deprecated form of raising exception
    myparse.py:347:31: E211 whitespace before '('
    myparse.py:357:17: E201 whitespace after '{'
    myparse.py:472:29: E221 multiple spaces before operator
    myparse.py:544:21: W601 .has_key() is deprecated, use 'in'

Notes (jshint):
    Fail

    No .js files detected
    134 files considered
    Maybe this isn't a JS project?

Notes (cppcheck):
    Fail

    No C++ files detected
    134 files considered
    Maybe this isn't a CPP project?

Notes (unit1):
    Ok

    Test1 Passed
    Test2 Passed, took 1 second(s)
    Test3 Passed, took 2.1145 second(s)
    Test4 Passed, took 152.124100 second(s)
    Test5 Passed, took 11.0012351 seconds(s)

Notes (unit2):
    Ok

    120 tests passed, 0 tests failed

Notes (unit3):
    Ok

    428 tests passed

Notes (regression):
    Ok

-------------------------------------------------------------------------------
- A better example of CI and git notes
-------------------------------------------------------------------------------

$ git log -1 --notes=*

commit 4ff4fa41cab849c4d1ecae7fcc754090e67741d3
Author: Angelos Evripiotis <jevripiotis@bloomberg.net>
Date:   Wed Jun 25 19:05:58 2014 +0100

    arcyd/acceptance...: test pruning landing log

    Add a test to the arcyd acceptance tests to make sure that we can
    manually prune the landing log and have that change persist across new
    reviews.

    Previously this may have gone wrong because arcyd wasn't fetching the
    special refs with a refspec beginning with '+', which enables non-ff
    updates.

    Test Plan:
    $ ./testbed/arcyd/acceptance_tests.sh

Notes (lint):
    Fail

    optparse.py:69:11: E401 multiple imports on one line
    optparse.py:77:1: E302 expected 2 blank lines, found 1
    optparse.py:88:5: E301 expected 1 blank line, found 0
    optparse.py:222:34: W602 deprecated form of raising exception
    optparse.py:347:31: E211 whitespace before '('
    optparse.py:357:17: E201 whitespace after '{'
    optparse.py:472:29: E221 multiple spaces before operator
    optparse.py:544:21: W601 .has_key() is deprecated, use 'in'
    argparse.py:69:11: E401 multiple imports on one line
    argparse.py:77:1: E302 expected 2 blank lines, found 1

    .. 20 more results omitted ..
    https://myci.example/4ff4fa41cab849c4d1ecae7fcc754090e67741d3

Notes (unit):
    Ok

Notes (regression):
    Ok

-------------------------------------------------------------------------------
- Differences between example and counter-example
-------------------------------------------------------------------------------

- Fewer namespaces, one per major 'pass' over the repo.  Passes grouped by time
  required.

- Large lists of failures are truncated, we can't store enormous lists of
  failures, large lists of failures should not pass review, Git notes is
  not a code review system.

- 'Ok' is used when all tests pass, no need for more information when reviewing

-------------------------------------------------------------------------------
- example walkthrough
-------------------------------------------------------------------------------

- author push working branch
- ci system annotated head commit
- author push working branch as review branch
- arcyd creates review, adds ci notes as comments on review
- author pushes new commit on review branch
- ci system annotated head commit
- arcyd adds ci notes as comments on review
- review accepted
- arcyd lands review

Example with conditional push to review branch

-------------------------------------------------------------------------------
- References
-------------------------------------------------------------------------------

[1] https://github.com/blog/707-git-notes-display
[2] http://git.661346.n2.nabble.com/PATCH-0-4-gitweb-preliminary-notes-support-td4514488.html
[3] http://git-scm.com/2010/08/25/notes.html

# -----------------------------------------------------------------------------
# Copyright (C) 2014 Bloomberg Finance L.P.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
# ------------------------------ END-OF-FILE ----------------------------------
