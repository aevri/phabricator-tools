#!/usr/bin/env python3
"""
Interactively gets details from user to construct an arc style commit
message, amend the last commit with the new message, generate and execute
the push command to create the ph-review branch.
"""
import sys
import subprocess
import os
import tempfile


def getFileInput(msg):
    try:
        msgFile = tempfile.NamedTemporaryFile(delete=False)
        msgFile.write("\n#%s" % msg)
        fname = msgFile.name
        msgFile.close()

        subprocess.call(["vim", fname])
        msgFile = open(fname)
        msg = ""
        for line in msgFile:
            if line[0] is not "#":
                msg += line
        return msg
    finally:
        os.remove(fname)


def main(argv=None):

    order = [
        "title", "summary", "test_plan",
        "reviewers", "branch", "remote", "landing_branch", "msg_method"
    ]

    fields = {
        "title": {
            "prompt":       "revision title",
        },
        "summary": {
            "prompt":       "Summary",
            "multiline":    True
        },
        "test_plan": {
            "prompt":       "Test plan",
            "multiline":    True
        },
        "reviewers": {
            "prompt":       "Reviewers",
            "default":      ""
        },
        "branch": {
            "prompt":       "Branch to be pushed"
        },
        "remote": {
            "prompt":       "Remote to be pushed to",
            "default":      "origin"
        },
        "landing_branch": {
            "prompt":       "Branch to be diffed against and landed on",
            "default":      "master"
        },
        "msg_method": {
            "prompt":       "Create an empty commit for the new message (c)"
                            " amend the message on the previous commit (a)",
            "default":      "c"
        }
    }

    p = subprocess.Popen(
        ["git", "rev-parse", "--abbrev-ref", "HEAD"],
        stdout=subprocess.PIPE
    )
    fields["branch"]["default"] = p.stdout.readline()[:-1]

    p = subprocess.Popen(
        ["git", "log", "-1", "--pretty=%B"],
        stdout=subprocess.PIPE
    )
    fields["title"]["default"] = '%s' % p.stdout.readline()[:-1]

    for fieldName in order:
        field = fields[fieldName]

        if "multiline" in field:
            field["entry"] = getFileInput(field["prompt"])

        elif "default" in field:
            field["entry"] = raw_input(
                "%s [%s]" % (field["prompt"], field["default"]))

            if not field["entry"]:
                field["entry"] = field["default"]

        else:
            field["entry"] = raw_input(field["prompt"] + ":")

        def getTupleFromFields(requestedFields):
            entries = [fields[field]["entry"] for field in requestedFields]
            return tuple(entries)

    msg = """%s

%s
Test Plan: %s
Reviewers: %s
""" % getTupleFromFields(["title", "summary", "test_plan", "reviewers"])

    if fields["msg_method"]["entry"] is "c":
        if not subprocess.call(["git", "diff", "--cached", "--exit-code"]):
            msgCommand = 'git commit --allow-empty -m "%s"' % msg
        else:
            exit("you cannot use the empty commit method "
                 "with uncommited changes in your index")
    else:
        msgCommand = 'git commit --amend -m "%s"' % msg

    pushCommand = "git push %s %s:ph-review/%s/%s" % getTupleFromFields(
        ["remote", "branch", "branch", "landing_branch"])

    print """######## NEW COMMIT MESSAGE #########
%s
########## PUSH COMMAND #############
%s
#####################################""" % (msg, pushCommand)

    response = raw_input(
        "\nDo you want to write the commit message and "
        "push (p), just write message (m) or do nothing (N)?")
    if response is "p" or response is "m":
        subprocess.call(msgCommand, shell=True)
        if response is "p":
            subprocess.call(pushCommand, shell=True)
    else:
        print "nothing was done."

if __name__ == "__main__":
    sys.exit(main())

# -----------------------------------------------------------------------------
# Copyright (C) 2013-2014 Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------ END-OF-FILE ----------------------------------
